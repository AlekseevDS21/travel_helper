import streamlit as st
import requests
import datetime
from datetime import timedelta
import json

# Set page configuration
st.set_page_config(
    page_title="–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–π",
    page_icon="‚úàÔ∏è",
    layout="wide"
)

# App title
st.title("‚úàÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–π")
st.markdown("–í–≤–µ–¥–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤–∞—à–µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")

# Create a form for user inputs
with st.form("travel_form"):
    col1, col2 = st.columns(2)
    
    with col1:
        departure_city = st.text_input("–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "–ú–æ—Å–∫–≤–∞")
        destination_city = st.text_input("–ì–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è", "")
        
        # Get today's date for defaults and validation
        today = datetime.date.today()
        # Set default departure date to a week from now
        default_departure = today + timedelta(days=7)
        
        # Make sure dates are within reasonable ranges
        departure_date = st.date_input(
            "–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            default_departure,
            min_value=today,
            max_value=today + timedelta(days=365)
        )
        
        # Set return date to be a week after departure by default
        default_return = departure_date + timedelta(days=7)
        return_date = st.date_input(
            "–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è",
            default_return,
            min_value=departure_date,
            max_value=departure_date + timedelta(days=30)
        )
        
    with col2:
        is_one_way = st.checkbox("–í –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É")
        direct_flights = st.checkbox("–¢–æ–ª—å–∫–æ –ø—Ä—è–º—ã–µ —Ä–µ–π—Å—ã")
        
        flight_class = st.selectbox(
            "–ö–ª–∞—Å—Å –ø–æ–ª–µ—Ç–∞",
            ["economy", "business", "first"],
            format_func=lambda x: {"economy": "–≠–∫–æ–Ω–æ–º", "business": "–ë–∏–∑–Ω–µ—Å", "first": "–ü–µ—Ä–≤—ã–π"}[x]
        )
        
        # Change label to show budget in USD
        budget = st.number_input("–ë—é–¥–∂–µ—Ç ($)", min_value=50, value=500)
        # Convert budget to rubles for API (since API expects rubles)
        budget_rub = budget * 90.0  # Using same conversion rate as API
        
        col_adults, col_children, col_infants = st.columns(3)
        with col_adults:
            adults = st.number_input("–í–∑—Ä–æ—Å–ª—ã–µ", min_value=1, max_value=9, value=1)
        with col_children:
            children = st.number_input("–î–µ—Ç–∏", min_value=0, max_value=9, value=0)
        with col_infants:
            infants = st.number_input("–ú–ª–∞–¥–µ–Ω—Ü—ã", min_value=0, max_value=9, value=0)
    
    preferences = st.multiselect(
        "–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è",
        ["active", "art", "beach"],
        format_func=lambda x: {"active": "–ê–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö", "art": "–ò—Å–∫—É—Å—Å—Ç–≤–æ –∏ –∫—É–ª—å—Ç—É—Ä–∞", "beach": "–ü–ª—è–∂–Ω—ã–π –æ—Ç–¥—ã—Ö"}[x],
        default=["active"]  # Default to active tourism
    )
    
    # Make the submit button more visible
    submitted = st.form_submit_button("–ù–∞–π—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", use_container_width=True)

# Process form submission
if submitted:
    # Check if destination city is provided
    if not destination_city:
        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.")
    # Check if preferences are selected
    elif not preferences:
        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ.")
    else:
        with st.spinner('–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...'):
            try:
                # Prepare request payload
                payload = {
                    "departure_city": departure_city,
                    "destination_city": destination_city,
                    "departure_date": departure_date.strftime('%Y-%m-%d'),
                    "return_date": None if is_one_way else return_date.strftime('%Y-%m-%d'),
                    "flight_class": flight_class,
                    "budget": budget_rub,  # Send budget in rubles to API
                    "adults": adults,
                    "children": children,
                    "infants": infants,
                    "is_one_way": is_one_way,
                    "direct_flights": direct_flights,
                    "preferences": preferences
                }
                
                # Make API request
                response = requests.post(
                    "http://api:8000/recommend",
                    json=payload,
                    headers={"Content-Type": "application/json"},
                    timeout=60  # Increase timeout to 60 seconds
                )
                
                if response.status_code == 200:
                    # Process the response sections separately for better rendering
                    response_text = response.text
                    
                    # Split the response into sections
                    sections = response_text.split('---')
                    
                    if len(sections) >= 3:
                        # Flights and hotels info
                        st.markdown(sections[0], unsafe_allow_html=True)
                        
                        # Recommendations
                        st.markdown("---")
                        st.markdown(sections[1], unsafe_allow_html=True)
                        
                        # Checklist section
                        st.markdown("---")
                        st.markdown(sections[2], unsafe_allow_html=True)
                    else:
                        # Fallback if the response format is unexpected
                        st.markdown(response_text, unsafe_allow_html=True)
                else:
                    st.error(f"–û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
                    
            except Exception as e:
                st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# Footer
st.markdown("---")
st.markdown("üíº –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π | –°–æ–∑–¥–∞–π—Ç–µ –∏–¥–µ–∞–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ")