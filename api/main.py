from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import Optional, List, Dict
from enum import Enum
import httpx
import os
import random
import asyncio
from datetime import datetime, timedelta
from fastapi.responses import PlainTextResponse
from avia_parser import search_flights
from hotels_request import find_hotels

app = FastAPI(title="Travel Recommendation API")


OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions"
MODEL_NAME = "deepseek/deepseek-prover-v2:free"
# –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ü–µ–Ω –æ—Ç–µ–ª–µ–π –≤ —Ä—É–±–ª–∏
USD_TO_RUB = 90.0


class TravelPreference(str, Enum):
    ACTIVE = "active"
    ART = "art"
    BEACH = "beach"

class FlightClass(str, Enum):
    ECONOMY = "economy"
    BUSINESS = "business"
    FIRST = "first"

class TravelRequest(BaseModel):
    departure_city: str
    destination_city: Optional[str] = None
    departure_date: str
    return_date: Optional[str] = None
    flight_class: FlightClass = FlightClass.ECONOMY
    budget: float  # –≤ —Ä—É–±–ª—è—Ö
    adults: int = 1
    children: int = 0
    infants: int = 0
    is_one_way: bool = False
    direct_flights: bool = False
    preferences: List[TravelPreference]

class ParsedItem(BaseModel):
    markdown: str
    url: str
    price: float  # –≤ —Ä—É–±–ª—è—Ö

async def ask_llm(prompt: str) -> str:
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://your-travel-app.com",
        "X-Title": "Travel AI"
    }
    async with httpx.AsyncClient() as client:
        response = await client.post(
            OPENROUTER_API_URL,
            json={
                "model": MODEL_NAME,
                "messages": [{"role": "user", "content": prompt}]
            }, headers=headers, timeout=30
        )
        response.raise_for_status()
        return response.json()["choices"][0]["message"]["content"]

@app.get("/", response_class=PlainTextResponse)
async def root():
    return "Travel Recommendation API up & running. POST to /recommend"

@app.post("/recommend", response_class=PlainTextResponse)
async def recommend(request: TravelRequest):
    flight_results = await asyncio.to_thread(
        search_flights,
        origin_input=request.departure_city,
        destination_input=request.destination_city,
        departure_date=request.departure_date,
        return_date=request.return_date,
        is_one_way=request.is_one_way,
        direct=request.direct_flights,
        adult=request.adults,
        child=request.children,
        infant=request.infants,
        save_results=False
    )
    if not flight_results.get('data'):
        raise HTTPException(status_code=404, detail="No flights found")


    flights = []
    for f in flight_results['data']:
        flights.append({
            "airline": f.get("airline", "N/A"),
            "price": f.get("price", 0),
            "departure_time": f.get("departure_at", ""),
            "arrival_time": f.get("return_at", ""),
            "transfers": f.get("transfers", "?"),
            "link": f"https://aviasales.ru{f.get('link')}"
        })


    affordable = [f for f in flights if f["price"] <= request.budget]
    if not affordable:
        raise HTTPException(status_code=400, detail="–ë—é–¥–∂–µ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –±–∏–ª–µ—Ç–æ–≤")


    selected_flights = random.sample(affordable, min(3, len(affordable)))
    cheapest_price = min(f["price"] for f in affordable)
    remaining_budget = request.budget - cheapest_price



    budget_hotels_usd = remaining_budget / USD_TO_RUB if remaining_budget > 0 else 0


    check_out = request.return_date or (
        (datetime.strptime(request.departure_date, '%Y-%m-%d') + timedelta(days=1)).strftime('%Y-%m-%d')
    )

    hotel_list = []
    if budget_hotels_usd > 0:
        hotel_list = await asyncio.to_thread(
            find_hotels,
            request.destination_city,
            budget_hotels_usd,
            request.departure_date,
            check_out,
            request.adults + request.children + request.infants
        )
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ü–µ–Ω –æ—Ç–µ–ª–µ–π –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ä—É–±–ª–∏
    if hotel_list:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –æ—Ç–µ–ª–∏ —Å –Ω—É–ª–µ–≤–æ–π —Ü–µ–Ω–æ–π
        hotels: List[ParsedItem] = [
            ParsedItem(
                markdown=f"**{h['name']}** ‚Äî {h['total_price']} —Ä—É–±.",
                url=h['url'],
                price=h['total_price']
            )
            for h in hotel_list if h.get("total_price", 0) > 0
        ]


        hotels = hotels[:3]


    else:
        hotels = []

    flights_md = "\n\n".join([
        f"–ü–µ—Ä–µ–ª—ë—Ç {i+1}: {f['airline']} ‚Äî {f['price']} —Ä—É–±., –ø–µ—Ä–µ—Å–∞–¥–∫–∏: {f['transfers']}, {f['link']}"
        for i, f in enumerate(selected_flights)
    ])
    if hotels:
        hotels_md = "\n".join([item.markdown for item in hotels])
    else:
        hotels_md = "*–ë—é–¥–∂–µ—Ç–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞ –æ—Ç–µ–ª–∏.*"


    rec_prompt = f"""
–¢—ã ‚Äî —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–µ—Ä–µ–ª—ë—Ç–æ–≤ –∏  3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–µ–ª–µ–π.
–û–±—ä—è—Å–Ω–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏ –∫–∞–∂–¥–æ–≥–æ. –£—á–∏—Ç—ã–≤–∞–π —Ü–µ–Ω—É, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å–∞–¥–æ–∫, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–ª—ë—Ç–∞ –∏ —Ä–µ–ø—É—Ç–∞—Ü–∏—é –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏.
–£—á–∏—Ç—ã–≤–∞–π —Ü–µ–Ω—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ —É –æ—Ç–µ–ª–µ–π. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

–ü–µ—Ä–µ–ª—ë—Ç—ã:
{flights_md}

–û—Ç–µ–ª–∏:
{hotels_md}

–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown —Å–æ —Å–ø–∏—Å–∫–æ–º:
1. [–í–∞—Ä–∏–∞–Ω—Ç] (–±–µ–∑ —Ü–µ–Ω—ã)
   ‚Ä¢ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
   ‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏: (–µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–µ—Ç, –Ω–µ –≤—ã–≤–æ–¥–∏ –ø–æ–ª–µ)
   ‚Ä¢ –ö–æ–º—É –ø–æ–¥–æ–π–¥—ë—Ç:
"""

    checklist_prompt = f"""
–ò—Å–ø–æ–ª—å–∑—É–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. –°–æ–∑–¥–∞–π —á–µ–∫–ª–∏—Å—Ç –ø–æ –¥–Ω—è–º –¥–ª—è –ø–æ–µ–∑–¥–∫–∏ –≤ {request.destination_city} —Å —É—á—ë—Ç–æ–º:
- –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: {', '.join(request.preferences)}
- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: —Å {request.departure_date} –ø–æ {request.return_date or request.departure_date}
- –°–æ—Å—Ç–∞–≤–∞ –≥—Ä—É–ø–ø—ã: {request.adults} –≤–∑—Ä–æ—Å–ª—ã—Ö, {request.children} –¥–µ—Ç–µ–π

–û–ø–∏—à–∏, —á–µ–º —Ö–æ—Ä–æ—à –≥–æ—Ä–æ–¥, –∏ —á—Ç–æ –ø–æ—Å–µ—Ç–∏—Ç—å –ø–æ –¥–Ω—è–º. –§–æ—Ä–º–∞—Ç: Markdown —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –¥–Ω–µ–π.
"""

    recommendation, checklist = await asyncio.gather(
        ask_llm(rec_prompt),
        ask_llm(checklist_prompt)
    )


    result = f"""
## üõ´ –ê–≤–∏–∞–±–∏–ª–µ—Ç—ã
{flights_md}

## üè® –û—Ç–µ–ª–∏
{hotels_md}

---
## ü§ñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–µ—Ä–µ–ª–µ—Ç–∞–º\–æ—Ç–µ–ª—è–º
{recommendation}

---
## üìã –ß–µ–∫–ª–∏—Å—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞!
{checklist}
"""

    return result

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="127.0.0.1", port=8000)
