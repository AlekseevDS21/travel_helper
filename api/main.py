from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import Optional, List, Dict
from enum import Enum
import httpx
import os
from dotenv import load_dotenv
import random
import asyncio
from datetime import datetime, timedelta
from fastapi.responses import PlainTextResponse
from avia_parser import search_flights
from hotels_request import find_hotels

# Load environment variables
load_dotenv()

app = FastAPI(title="Travel Recommendation API")


OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions"
MODEL_NAME = "deepseek/deepseek-prover-v2:free"

# –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ü–µ–Ω –æ—Ç–µ–ª–µ–π –≤ —Ä—É–±–ª–∏
USD_TO_RUB = 90.0


class TravelPreference(str, Enum):
    ACTIVE = "active"
    ART = "art"
    BEACH = "beach"

class FlightClass(str, Enum):
    ECONOMY = "economy"
    BUSINESS = "business"
    FIRST = "first"

class TravelRequest(BaseModel):
    departure_city: str
    destination_city: Optional[str] = None
    departure_date: str
    return_date: Optional[str] = None
    flight_class: FlightClass = FlightClass.ECONOMY
    budget: float  # –≤ —Ä—É–±–ª—è—Ö
    adults: int = 1
    children: int = 0
    infants: int = 0
    is_one_way: bool = False
    direct_flights: bool = False
    preferences: List[TravelPreference]

class ParsedItem(BaseModel):
    markdown: str
    url: str
    price: float  # –≤ USD

async def ask_llm(prompt: str) -> str:
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://your-travel-app.com",
        "X-Title": "Travel AI"
    }
    async with httpx.AsyncClient() as client:
        response = await client.post(
            OPENROUTER_API_URL,
            json={
                "model": MODEL_NAME,
                "messages": [{"role": "user", "content": prompt}]
            }, headers=headers, timeout=30
        )
        response.raise_for_status()
        return response.json()["choices"][0]["message"]["content"]

@app.get("/", response_class=PlainTextResponse)
async def root():
    return "Travel Recommendation API up & running. POST to /recommend"

@app.post("/recommend", response_class=PlainTextResponse)
async def recommend(request: TravelRequest):
    flight_results = await asyncio.to_thread(
        search_flights,
        origin_input=request.departure_city,
        destination_input=request.destination_city,
        departure_date=request.departure_date,
        return_date=request.return_date,
        is_one_way=request.is_one_way,
        direct=request.direct_flights,
        adult=request.adults,
        child=request.children,
        infant=request.infants,
        save_results=False
    )
    if not flight_results.get('data'):
        raise HTTPException(status_code=404, detail="No flights found")


    flights = []
    for f in flight_results['data']:
        flights.append({
            "airline": f.get("airline", "N/A"),
            "price": f.get("price", 0),
            "departure_time": f.get("departure_at", ""),
            "arrival_time": f.get("return_at", ""),
            "transfers": f.get("transfers", "?"),
            "link": f"https://aviasales.ru{f.get('link')}"
        })


    affordable = [f for f in flights if f["price"] <= request.budget]
    if not affordable:
        raise HTTPException(status_code=400, detail="–ë—é–¥–∂–µ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –±–∏–ª–µ—Ç–æ–≤")


    selected_flights = random.sample(affordable, min(3, len(affordable)))
    cheapest_price = min(f["price"] for f in affordable)
    remaining_budget = request.budget - cheapest_price


    # Convert budget to USD for hotel search
    budget_hotels_usd = remaining_budget / USD_TO_RUB if remaining_budget > 0 else 0


    check_out = request.return_date or (
        (datetime.strptime(request.departure_date, '%Y-%m-%d') + timedelta(days=1)).strftime('%Y-%m-%d')
    )

    hotel_list = []
    if budget_hotels_usd > 0:
        hotel_list = await asyncio.to_thread(
            find_hotels,
            request.destination_city,
            budget_hotels_usd,
            request.departure_date,
            check_out,
            request.adults + request.children + request.infants
        )
    
    # Keep hotel prices in USD without converting to rubles
    if hotel_list:
        hotels = hotel_list[:3]  # Get top 3 hotels with most detailed info
    else:
        hotels = []

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–ª–µ—Ç–∞—Ö, –≤–∫–ª—é—á–∞—è —Å—Å—ã–ª–∫–∏
    flights_md = "\n\n".join([
        f"### –ü–µ—Ä–µ–ª—ë—Ç {i+1}: {f['airline']}\n" +
        f"* **–¶–µ–Ω–∞:** ${f['price']/USD_TO_RUB:.2f}\n" +
        f"* **–í—ã–ª–µ—Ç:** {f['departure_time']}\n" +
        f"* **–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ:** {f['arrival_time']}\n" +
        f"* **–ü–µ—Ä–µ—Å–∞–¥–∫–∏:** {f['transfers']}\n" +
        f"* **–°—Å—ã–ª–∫–∞:** {f['link']}"
        for i, f in enumerate(selected_flights)
    ])
    
    # Enhance hotel output with more details
    if hotels:
        hotels_md = ""
        for i, h in enumerate(hotels):
            nights = calculate_nights(request.departure_date, check_out) if not request.is_one_way else 1
            hotels_md += f"### –û—Ç–µ–ª—å {i+1}: {h['name']}\n"
            hotels_md += f"* **–†–µ–π—Ç–∏–Ω–≥:** {h['rating']}/10\n"
            hotels_md += f"* **–ó–≤–µ–∑–¥:** {'‚≠ê' * int(h['stars'])}\n"
            hotels_md += f"* **–¶–µ–Ω–∞ –∑–∞ –Ω–æ—á—å:** ${h['per_night']:.2f}\n"
            hotels_md += f"* **–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å ({nights} –Ω–æ—á–µ–π):** ${h['total_price']/100:.2f}\n"
            hotels_md += f"* **–ê–¥—Ä–µ—Å:** {h['address']}\n"
            if h['url']:
                hotels_md += f"* **–°—Å—ã–ª–∫–∞:** {h['url']}\n"
            if h['main_photo']:
                hotels_md += f"* **–§–æ—Ç–æ:** ![{h['name']}]({h['main_photo']})\n"
            hotels_md += "\n"
    else:
        hotels_md = "*–ë—é–¥–∂–µ—Ç–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞ –æ—Ç–µ–ª–∏.*"


    rec_prompt = f"""
–¢—ã ‚Äî —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–ª—ë—Ç–æ–≤ –∏ –æ—Ç–µ–ª–µ–π.
–û–±—ä—è—Å–Ω–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏ –∫–∞–∂–¥–æ–≥–æ. –£—á–∏—Ç—ã–≤–∞–π —Ü–µ–Ω—É, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å–∞–¥–æ–∫, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–ª—ë—Ç–∞ –∏ —Ä–µ–ø—É—Ç–∞—Ü–∏—é –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏.
–£—á–∏—Ç—ã–≤–∞–π —Ü–µ–Ω—É, —Ä–µ–π—Ç–∏–Ω–≥ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ —É –æ—Ç–µ–ª–µ–π. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

–í–∞–∂–Ω–æ: —Ç–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ Markdown —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ.

–ü–µ—Ä–µ–ª—ë—Ç—ã:
{flights_md}

–û—Ç–µ–ª–∏:
{hotels_md}

–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown —Å–æ —Å–ø–∏—Å–∫–æ–º:

#### –í—ã–±–æ—Ä –ø–µ—Ä–µ–ª—ë—Ç–∞ –∏ –æ—Ç–µ–ª—è

##### –ü–µ—Ä–µ–ª—ë—Ç 1: [–ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏]
- **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
  - [–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 1]
  - [–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 2]
- **–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:** (–µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–µ—Ç, –Ω–µ –≤—ã–≤–æ–¥–∏ –ø–æ–ª–µ)
  - [–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ 1]
  - [–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ 2]
- **–ö–æ–º—É –ø–æ–¥–æ–π–¥—ë—Ç:** [–æ–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏]

##### [–ò —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞]
"""

    checklist_prompt = f"""
–°–æ–∑–¥–∞–π —á–µ–∫–ª–∏—Å—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ –¥–ª—è –ø–æ–µ–∑–¥–∫–∏ –≤ {request.destination_city} –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown.

–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
- –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Ç—É—Ä–∏—Å—Ç–∞: {', '.join(request.preferences)}
- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏: —Å {request.departure_date} –ø–æ {request.return_date or request.departure_date}
- –°–æ—Å—Ç–∞–≤ –≥—Ä—É–ø–ø—ã: {request.adults} –≤–∑—Ä–æ—Å–ª—ã—Ö, {request.children} –¥–µ—Ç–µ–π

–¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown:
1. –ù–∞—á–Ω–∏ —Å –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –∏ –µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
2. –†–∞–∑–¥–µ–ª–∏ —á–µ–∫–ª–∏—Å—Ç –ø–æ –¥–Ω—è–º, –≥–¥–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è (##)
3. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è —Å–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏ (-)
4. –ò—Å–ø–æ–ª—å–∑—É–π **–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç** –¥–ª—è –≤–∞–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –∏ *–∫—É—Ä—Å–∏–≤* –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
5. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Ç—É—Ä–∏—Å—Ç–∞
6. –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ—Å—Ç–∞ –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç –ø–æ—Å–µ—Ç–∏—Ç—å, –æ—Ñ–æ—Ä–º–∏ –∏—Ö –∫–∞–∫ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç—Ä–µ—Ç—å–µ–≥–æ —É—Ä–æ–≤–Ω—è (###)

–û—á–µ–Ω—å –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã —ç—Ç–æ –±—ã–ª –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π markdown –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
"""

    recommendation, checklist = await asyncio.gather(
        ask_llm(rec_prompt),
        ask_llm(checklist_prompt)
    )

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–ª—è Markdown
    result = f"""
## üõ´ –ê–≤–∏–∞–±–∏–ª–µ—Ç—ã
{flights_md}

## üè® –û—Ç–µ–ª–∏
{hotels_md}

---

## ü§ñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–µ—Ä–µ–ª–µ—Ç–∞–º –∏ –æ—Ç–µ–ª—è–º

{recommendation}

---

## üìã –ß–µ–∫–ª–∏—Å—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞

{checklist}
"""

    return result

def calculate_nights(check_in: str, check_out: str) -> int:
    """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏."""
    date_in = datetime.strptime(check_in, '%Y-%m-%d')
    date_out = datetime.strptime(check_out, '%Y-%m-%d')
    nights = (date_out - date_in).days
    return max(1, nights)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="127.0.0.1", port=8000)
